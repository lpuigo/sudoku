package sudoku

import "testing"

func TestSudoku_String(t *testing.T) {
	s := New(9)
	s.values = []int{
		0, 2, 3, 1, 0, 3, 1, 2, 0,
		4, 5, 6, 4, 5, 6, 4, 5, 6,
		7, 8, 9, 7, 8, 9, 7, 8, 9,
		1, 2, 3, 1, 2, 3, 1, 2, 3,
		0, 5, 6, 4, 0, 6, 4, 5, 0,
		7, 8, 9, 7, 8, 9, 7, 8, 9,
		1, 2, 3, 1, 2, 3, 1, 2, 3,
		4, 5, 6, 4, 5, 6, 4, 5, 6,
		0, 8, 9, 7, 0, 9, 7, 8, 0,
	}
	t.Log(s.String())
}

func TestSudoku_IsValid(t *testing.T) {
	s := New(9)
	s.values = []int{
		1, 2, 3, 4, 5, 6, 7, 8, 9,
		0, 0, 0, 1, 0, 0, 0, 0, 0,
		0, 0, 0, 2, 0, 0, 0, 0, 0,

		0, 0, 0, 3, 0, 0, 0, 0, 0,
		0, 0, 0, 8, 0, 0, 0, 0, 0,
		0, 0, 0, 9, 0, 0, 0, 0, 0,

		2, 1, 7, 5, 0, 0, 0, 0, 0,
		3, 5, 8, 6, 0, 0, 0, 0, 0,
		4, 6, 9, 7, 0, 0, 0, 0, 0,
	}

	for _, tc := range []struct {
		value, row, col int
		expect          bool
	}{
		{2, 0, 1, true},
		{3, 0, 1, false},

		{1, 1, 3, true},
		{2, 1, 3, false},

		{5, 7, 1, true},
		{9, 7, 1, false},
	} {
		if s.IsValid(tc.value, tc.row, tc.col) != tc.expect {
			t.Logf("%d should be Valid at (%d, %d) in %s", tc.value, tc.row, tc.col, s.String())
		}
	}
}

func TestSudoku_GetValid(t *testing.T) {
	s := New(9)
	s.values = []int{
		1, 2, 3, 4, 5, 6, 7, 8, 9,
		0, 0, 0, 1, 0, 0, 0, 0, 0,
		0, 0, 0, 2, 0, 0, 0, 0, 0,

		0, 0, 0, 3, 0, 0, 0, 0, 0,
		0, 0, 0, 8, 0, 0, 0, 0, 0,
		0, 0, 0, 9, 0, 0, 0, 0, 0,

		2, 1, 7, 5, 0, 0, 0, 0, 0,
		3, 5, 8, 6, 0, 0, 0, 0, 0,
		4, 6, 9, 7, 0, 0, 0, 0, 0,
	}

	t.Logf(s.GetValid(0, 0).String())
	t.Logf(s.GetValid(1, 0).String())
	t.Logf(s.GetValid(7, 4).String())
}

func TestSudoku_Solve(t *testing.T) {
	s := New(9)
	//s.values = []int{
	//	0, 0, 1, 0, 9, 0, 0, 4, 0,
	//	0, 0, 4, 0, 0, 0, 0, 8, 0,
	//	7, 8, 0, 0, 0, 3, 0, 1, 2,
	//
	//	0, 0, 3, 0, 0, 2, 9, 0, 0,
	//	0, 0, 0, 5, 0, 0, 0, 0, 6,
	//	6, 7, 0, 0, 3, 0, 0, 0, 0,
	//
	//	2, 0, 0, 3, 0, 4, 0, 6, 0,
	//	0, 0, 5, 0, 0, 0, 0, 0, 3,
	//	1, 0, 6, 0, 0, 5, 0, 9, 0,
	//}

	// Very Easy
	//s.values = []int{
	//	9, 0, 0, 0, 3, 0, 4, 0, 0,
	//	0, 0, 0, 8, 0, 0, 0, 0, 9,
	//	7, 4, 2, 0, 0, 0, 6, 0, 0,
	//
	//	0, 0, 0, 0, 0, 0, 7, 0, 0,
	//	0, 0, 0, 5, 4, 0, 0, 0, 0,
	//	0, 5, 0, 0, 7, 0, 8, 1, 0,
	//
	//	0, 6, 5, 0, 0, 9, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 3,
	//	0, 3, 1, 0, 0, 2, 0, 0, 0,
	//}

	// Easy
	//s.values = []int{
	//	0, 0, 5, 0, 3, 0, 0, 0, 0,
	//	0, 0, 0, 2, 7, 6, 0, 0, 0,
	//	0, 3, 0, 0, 8, 0, 0, 4, 2,
	//
	//	0, 0, 0, 0, 0, 7, 4, 6, 0,
	//	8, 0, 1, 3, 0, 0, 7, 0, 0,
	//	0, 0, 0, 0, 0, 0, 1, 3, 0,
	//
	//	0, 0, 0, 0, 0, 0, 0, 7, 0,
	//	4, 8, 2, 0, 0, 3, 0, 1, 0,
	//	1, 7, 0, 5, 0, 0, 0, 0, 0,
	//}

	// Difficult
	s.values = []int{
		0, 3, 0, 0, 5, 0, 0, 4, 0,
		2, 0, 0, 0, 3, 0, 0, 0, 5,
		0, 0, 0, 0, 0, 0, 0, 0, 0,

		0, 0, 1, 0, 0, 0, 0, 0, 0,
		0, 4, 0, 0, 6, 0, 0, 0, 2,
		0, 0, 0, 0, 4, 0, 0, 0, 0,

		3, 0, 0, 0, 0, 0, 0, 0, 4,
		0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 2, 0,
	}

	s.Solve(0)
}
